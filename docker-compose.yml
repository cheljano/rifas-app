# -------------------- docker-compose.yml (Mejorado) --------------------

version: '3.8'

services:
  # Servicio de la Base de Datos
  db:
    image: postgres:15-alpine
    container_name: rifas_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rifas_db}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - rifas-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d rifas_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Servicio del Backend (API Node.js)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rifas_backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
      DB_HOST: db
      POSTGRES_DB: ${POSTGRES_DB:-rifas_db}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      # URL del frontend para una configuración de CORS segura
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8080}
    networks:
      - rifas-net

  # Servicio del Frontend (React servido con Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # Inyecta las URLs como argumentos en el momento de la construcción.
        # Dentro de la red de Docker, el backend es accesible por su nombre de servicio 'backend'.
        - REACT_APP_API_URL=http://backend:3000/api
        - REACT_APP_SOCKET_URL=http://backend:3000
    container_name: rifas_frontend
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - rifas-net

# Definición de la red para la comunicación entre contenedores
networks:
  rifas-net:
    driver: bridge

# Definición del volumen para persistencia de datos de la BD
volumes:
  db-data:
    driver: local